/*
 *
 *  * Copyright 2020 New Relic Corporation. All rights reserved.
 *  * SPDX-License-Identifier: Apache-2.0
 *
 */

package java.sql;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import com.newrelic.api.agent.NewRelic;
import com.newrelic.api.agent.weaver.MatchType;
import com.newrelic.api.agent.weaver.NewField;
import com.newrelic.api.agent.weaver.Weave;
import com.newrelic.api.agent.weaver.Weaver;

@Weave(originalName = "java.sql.Connection", type = MatchType.Interface)
public abstract class Connection_Weaved {
	
	@NewField
	private static List<String> skipped = new ArrayList<>();

	public PreparedStatement_Weaved prepareStatement(String sql) throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		} 
		return preparedStatement;
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		CallableStatement callableStatement = Weaver.callOriginal();
		if(isMatch(callableStatement)) {
			((PreparedStatement_Weaved) callableStatement).preparedSql = sql;
		}
		return callableStatement;
	}

	public PreparedStatement_Weaved prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
			throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		}
		return preparedStatement;
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		CallableStatement callableStatement = Weaver.callOriginal();
		((PreparedStatement_Weaved) callableStatement).preparedSql = sql;
		return callableStatement;
	}

	public PreparedStatement_Weaved prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		}
		return preparedStatement;
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		CallableStatement callableStatement = Weaver.callOriginal();
		if(isMatch(callableStatement)) {
			((PreparedStatement_Weaved) callableStatement).preparedSql = sql;
		}
		return callableStatement;
	}

	public PreparedStatement_Weaved prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		}
		return preparedStatement;
	}

	public PreparedStatement_Weaved prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		}
		return preparedStatement;
	}

	public PreparedStatement_Weaved prepareStatement(String sql, String[] columnNames) throws SQLException {
		PreparedStatement_Weaved preparedStatement = Weaver.callOriginal();
		if(isMatch(preparedStatement)) {
			preparedStatement.preparedSql = sql;
		}
		return preparedStatement;
	}

	private static boolean isMatch(Object obj) {
		if(obj instanceof java.sql.Connection) {
			Class<?> clazz = obj.getClass();
			Package clazzPackage = clazz.getPackage();
			if(clazzPackage != null) {
				String packageName = clazzPackage.getName();
				if(!packageName.startsWith("com.sap")) return true;
			}
			String className = clazz.getName();
			if(!skipped.contains(className)) {
				skipped.add(className);
				NewRelic.getAgent().getLogger().log(Level.FINE, "Adding connection class {0} to skipped list", className);
			}
			
		}
		return false;
		
	}
}