/*
 *
 *  * Copyright 2020 New Relic Corporation. All rights reserved.
 *  * SPDX-License-Identifier: Apache-2.0
 *
 */

package java.sql;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.logging.Level;

import com.newrelic.agent.bridge.datastore.DatastoreMetrics;
import com.newrelic.api.agent.NewRelic;
import com.newrelic.api.agent.Trace;
import com.newrelic.api.agent.weaver.MatchType;
import com.newrelic.api.agent.weaver.Weave;
import com.newrelic.api.agent.weaver.Weaver;

@Weave(originalName = "java.sql.Statement", type = MatchType.Interface)
public abstract class Statement_Weaved {

	@Trace(leaf = true)
	public ResultSet executeQuery(String sql) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public int executeUpdate(String sql) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public boolean execute(String sql) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		String classname = getClass().getName();
		if(!classname.startsWith("com.sap.sql") && !classname.startsWith("com.sap.engine.services.dbpool")) {
			DatastoreMetrics.noticeSql(getConnection(), sql, null);
		} else {
			Connection conn = getConnectionFromStatement();
			DatastoreMetrics.noticeSql(conn, sql, null);
		}
		return Weaver.callOriginal();
	}

	public abstract Connection getConnection() throws SQLException;

	private Connection getConnectionFromStatement() {
		Class<?> stmtClass = getClass();
		String classname = stmtClass.getName();
		Object objToUse = this;
 
		while(stmtClass != null) {
			try {
				if(classname.equals("com.sap.sql.jdbc.common.CommonStatement")) {
					Field nativeConnectionField = stmtClass.getDeclaredField("nativeConnection");
					nativeConnectionField.setAccessible(true);;
					Object nativeConnection = nativeConnectionField.get(objToUse);
					if(nativeConnectionField != null) {
						if(nativeConnection != null && nativeConnection instanceof Connection) {
							return (Connection)nativeConnection;
						}
					}
				} else if(classname.equals("com.sap.sql.jdbc.direct.DirectStatement")) {
					Field pStmtField = stmtClass.getDeclaredField("vendorStmt");
					pStmtField.setAccessible(true);
					Object pStmt = pStmtField.get(objToUse);
					Class<?> prepStmtClass = pStmt.getClass();
					Method getConnMethod = prepStmtClass.getDeclaredMethod("getConnection", new Class[] {});
					Object obj = getConnMethod.invoke(pStmt, new Object[] {});

					if(obj != null && obj instanceof Connection) {
						return (Connection)obj;
					}

				} else if(classname.equals("com.sap.engine.services.dbpool.wrappers.StatementWrapper")) {
					Field pstmtField = stmtClass.getDeclaredField("stmt");
					pstmtField.setAccessible(true);
					Object obj = pstmtField.get(this);
					if(obj != null && obj instanceof Statement_Weaved) {
						stmtClass = obj.getClass();
						classname = stmtClass.getName();
						objToUse = obj;
					}
				} else {
					stmtClass = null;
				}
			} catch (Exception e) {
				NewRelic.getAgent().getLogger().log(Level.FINER, "/{0} due to exception of type {1}",this,e.getClass().getSimpleName());
				NewRelic.incrementCounter("SAP/JDBC/FailedToGetConnection");
				NewRelic.incrementCounter("SAP/JDBC/FailedToGetConnection/"+objToUse.getClass().getSimpleName()+"/"+e.getClass().getSimpleName());
				stmtClass = null;
			}
		}

		try {
			return this.getConnection();
		} catch (SQLException e) {
			return null;
		}
	}


}