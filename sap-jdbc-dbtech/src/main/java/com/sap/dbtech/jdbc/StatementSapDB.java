package com.sap.dbtech.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;

import com.newrelic.agent.database.ParsedDatabaseStatement;
import com.newrelic.api.agent.DatastoreParameters;
import com.newrelic.api.agent.NewRelic;
import com.newrelic.api.agent.Trace;
import com.newrelic.api.agent.TracedMethod;
import com.newrelic.api.agent.weaver.MatchType;
import com.newrelic.api.agent.weaver.Weave;
import com.newrelic.api.agent.weaver.Weaver;
import com.newrelic.instrumentation.labs.sap.dbtech.Utils;
import com.newrelic.instrumentation.labs.sap.dbtech.Utils.DBInfo;

@Weave(type = MatchType.BaseClass)
public abstract class StatementSapDB {
	
	public abstract Connection getConnection();
	
	@Trace(leaf = true)
	public boolean execute(String sql)  {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public boolean execute(String sql, int autoGeneratedKeys) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public boolean execute(String sql, int[] columnIndexes) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public boolean execute(String sql, String[] columnNames) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public ResultSet executeQuery(String sql) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public ResultSetSapDB executeQuerySap(String sql) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public int executeUpdate(String sql)  {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public int executeUpdate(String sql, int autoGeneratedKeys) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public int executeUpdate(String sql, int[] columnIndexes) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
	
	@Trace(leaf = true)
	public int executeUpdate(String sql, String[] columnNames) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}

	@Trace(leaf = true)
	protected boolean execute(String sql, boolean forQuery, int resultSetType, int resultSetConcurrency) {
		TracedMethod traced = NewRelic.getAgent().getTracedMethod();
		traced.addCustomAttribute("SQL", sql);
		DBInfo dbinfo = Utils.getDBInfo((ConnectionSapDB) getConnection());
		ParsedDatabaseStatement parsedStmt = Utils.parseSQL(sql);
		traced.addCustomAttribute("ParsedDatabaseStatement", parsedStmt.toString());
		DatastoreParameters params = Utils.getDBParameters(parsedStmt, dbinfo, sql);
		traced.addCustomAttribute("DBInfo", dbinfo.toString());
		if(params != null) {
			traced.reportAsExternal(params);
		}
		return Weaver.callOriginal();
	}
}
